@mixin breakpoint($breakpoint) {
	$raw-query: map-get($breakpoints, $breakpoint);

	@if $raw-query {
		$query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

		@media #{$query} {
			@content;
		}
	} @else {
		@error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
	}
}

@mixin fontFace($font, $filename, $svgNamespace) {
	@font-face {
		font-family: $font;
		src: url('../fonts/#{$filename}.eot');
		src: url('../fonts/#{$filename}.eot?#iefix') format("embedded-opentype"),
			 url('../fonts/#{$filename}.woff2') format("woff2"),
			 url('../fonts/#{$filename}.woff') format("woff"),
			 url('../fonts/#{$filename}.ttf') format("truetype"),
			 url('../fonts/#{$filename}.svg##{$svgNamespace}') format("svg");
		font-weight: normal;
		font-style: normal;
	}
}

@mixin material_icon($font_size, $icon_name) {
	content: $icon_name;
	font: #{$font_size}/1 "Material Icons";

	-webkit-font-smoothing: antialiased;
	text-rendering: optimizeLegibility;
	-moz-osx-font-smoothing: grayscale;
	font-feature-settings: 'liga';
}

@mixin transition( $what: "all", $duration: "250ms", $easing: "ease-in-out" ) {
	transition: #{$what} #{$duration} #{$easing};
}